// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: users.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const Role = {
  BUYER: "BUYER",
  ADMIN: "ADMIN",
  MODERATOR: "MODERATOR",
  SELLER: "SELLER",
  UNRECOGNIZED: "UNRECOGNIZED",
} as const;

export type Role = typeof Role[keyof typeof Role];

export namespace Role {
  export type BUYER = typeof Role.BUYER;
  export type ADMIN = typeof Role.ADMIN;
  export type MODERATOR = typeof Role.MODERATOR;
  export type SELLER = typeof Role.SELLER;
  export type UNRECOGNIZED = typeof Role.UNRECOGNIZED;
}

export interface Empty {
}

export interface UserResponse {
  id: string;
  username: string;
  email: string;
  createdAt: string;
  updatedAt: string;
  role: string;
}

export interface UsersResponse {
  users: UserResponse[];
}

export interface UpdateUserRequest {
  userId: string;
  username?: string | undefined;
  role?: Role | undefined;
}

export interface FindUserRequest {
  userId: string;
}

export interface UsersServiceClient {
  updateUser(request: UpdateUserRequest, metadata: Metadata, ...rest: any): Observable<UserResponse>;

  findUser(request: FindUserRequest, metadata: Metadata, ...rest: any): Observable<UserResponse>;

  findAllUsers(request: Empty, metadata: Metadata, ...rest: any): Observable<UsersResponse>;
}

export interface UsersServiceController {
  updateUser(
    request: UpdateUserRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findUser(
    request: FindUserRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  findAllUsers(
    request: Empty,
    metadata: Metadata,
    ...rest: any
  ): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;
}

export function UsersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["updateUser", "findUser", "findAllUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UsersService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USERS_SERVICE_NAME = "UsersService";
