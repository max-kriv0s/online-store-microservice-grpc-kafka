// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: categories.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface Empty {
}

export interface CategoryResponse {
  id: string;
  name: string;
  description: string;
}

export interface CategoriesResponse {
  categories: CategoryResponse[];
}

export interface CreateCategoryRequest {
  name: string;
  description: string;
}

export interface UpdateCategoryRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
}

export interface DeleteCategoryRequest {
  id: string;
}

export interface FindCategoryRequest {
  id: string;
}

export interface CategoriesServiceClient {
  create(request: CreateCategoryRequest, metadata: Metadata, ...rest: any): Observable<CategoryResponse>;

  update(request: UpdateCategoryRequest, metadata: Metadata, ...rest: any): Observable<CategoryResponse>;

  delete(request: DeleteCategoryRequest, metadata: Metadata, ...rest: any): Observable<Empty>;

  findCategory(request: FindCategoryRequest, metadata: Metadata, ...rest: any): Observable<CategoryResponse>;

  findAllCategory(request: Empty, metadata: Metadata, ...rest: any): Observable<CategoriesResponse>;
}

export interface CategoriesServiceController {
  create(
    request: CreateCategoryRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  update(
    request: UpdateCategoryRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  delete(request: DeleteCategoryRequest, metadata: Metadata, ...rest: any): Promise<Empty> | Observable<Empty> | Empty;

  findCategory(
    request: FindCategoryRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CategoryResponse> | Observable<CategoryResponse> | CategoryResponse;

  findAllCategory(
    request: Empty,
    metadata: Metadata,
    ...rest: any
  ): Promise<CategoriesResponse> | Observable<CategoriesResponse> | CategoriesResponse;
}

export function CategoriesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "delete", "findCategory", "findAllCategory"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CategoriesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CATEGORIES_SERVICE_NAME = "CategoriesService";
