// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: orders.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const OrderStatus = {
  Created: 'Created',
  Confirmed: 'Confirmed',
  Processing: 'Processing',
  Collected: 'Collected',
  Done: 'Done',
  Canceled: 'Canceled',
  UNRECOGNIZED: 'UNRECOGNIZED',
} as const;

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus];

export namespace OrderStatus {
  export type Created = typeof OrderStatus.Created;
  export type Confirmed = typeof OrderStatus.Confirmed;
  export type Processing = typeof OrderStatus.Processing;
  export type Collected = typeof OrderStatus.Collected;
  export type Done = typeof OrderStatus.Done;
  export type Canceled = typeof OrderStatus.Canceled;
  export type UNRECOGNIZED = typeof OrderStatus.UNRECOGNIZED;
}

export const SortDirection = { desc: 'desc', asc: 'asc', UNRECOGNIZED: 'UNRECOGNIZED' } as const;

export type SortDirection = (typeof SortDirection)[keyof typeof SortDirection];

export namespace SortDirection {
  export type desc = typeof SortDirection.desc;
  export type asc = typeof SortDirection.asc;
  export type UNRECOGNIZED = typeof SortDirection.UNRECOGNIZED;
}

export interface Empty {}

export interface SortQuery {
  field: string;
  direction: SortDirection;
}

export interface Item {
  productId: string;
  quantity: number;
  unitPrice: number;
  sum: number;
}

export interface OrderResponse {
  orderId: string;
  status: OrderStatus;
  date: number;
  totalSum: number;
  customerId: string;
  items: Item[];
  createdAt: number;
}

export interface FindAllOrderResponse {
  orderId: string;
  status: OrderStatus;
  date: number;
  totalSum: number;
  customerId: string;
  createdAt: number;
}

export interface FindAllOrdersResponse {
  pagesCount: number;
  page: number;
  pageSize: number;
  totalCount: number;
  items: FindAllOrderResponse[];
}

export interface CreateOrderRequest {
  customerId: string;
  items: Item[];
}

export interface OrderRequest {
  orderId: string;
  customerId: string;
}

export interface FindAllOrdersRequest {
  customerId: string;
  pageNumber?: number | undefined;
  pageSize?: number | undefined;
  sortBy: SortQuery[];
}

export interface OrdersServiceClient {
  createOrder(request: CreateOrderRequest, metadata: Metadata, ...rest: any): Observable<OrderResponse>;

  canceledOrder(request: OrderRequest, metadata: Metadata, ...rest: any): Observable<Empty>;

  shipOrder(request: OrderRequest, metadata: Metadata, ...rest: any): Observable<Empty>;

  findOrder(request: OrderRequest, metadata: Metadata, ...rest: any): Observable<OrderResponse>;

  findAllOrders(request: FindAllOrdersRequest, metadata: Metadata, ...rest: any): Observable<FindAllOrdersResponse>;
}

export interface OrdersServiceController {
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  canceledOrder(request: OrderRequest, metadata: Metadata, ...rest: any): Promise<Empty> | Observable<Empty> | Empty;

  shipOrder(request: OrderRequest, metadata: Metadata, ...rest: any): Promise<Empty> | Observable<Empty> | Empty;

  findOrder(
    request: OrderRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  findAllOrders(
    request: FindAllOrdersRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<FindAllOrdersResponse> | Observable<FindAllOrdersResponse> | FindAllOrdersResponse;
}

export function OrdersServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['createOrder', 'canceledOrder', 'shipOrder', 'findOrder', 'findAllOrders'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('OrdersService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('OrdersService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDERS_SERVICE_NAME = 'OrdersService';
