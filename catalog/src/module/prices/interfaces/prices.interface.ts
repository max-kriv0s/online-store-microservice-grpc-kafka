// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: prices.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export interface Empty {}

export interface ProductPriceResponse {
  id: string;
  period: number;
  productId: string;
  price: number;
}

export interface ProductsPricesResponse {
  productsPrices: ProductPriceResponse[];
}

export interface AddProductPriceRequest {
  period: number;
  productId: string;
  price: number;
}

export interface UpdateProductPriceRequest {
  id: string;
  period?: number | undefined;
  productId?: string | undefined;
  price?: number | undefined;
}

export interface DeleteProductPriceRequest {
  id: string;
}

export interface GetProductsPricesRequest {
  productsIds: string[];
  period?: number | undefined;
}

export interface PricesServiceClient {
  addProductPrice(request: AddProductPriceRequest, metadata: Metadata, ...rest: any): Observable<ProductPriceResponse>;

  updateProductPrice(
    request: UpdateProductPriceRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<ProductPriceResponse>;

  deleteProductPrice(request: DeleteProductPriceRequest, metadata: Metadata, ...rest: any): Observable<Empty>;

  getProductsPrices(
    request: GetProductsPricesRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<ProductsPricesResponse>;

  getCurrentPricesProducts(
    request: GetProductsPricesRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<ProductsPricesResponse>;
}

export interface PricesServiceController {
  addProductPrice(
    request: AddProductPriceRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ProductPriceResponse> | Observable<ProductPriceResponse> | ProductPriceResponse;

  updateProductPrice(
    request: UpdateProductPriceRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ProductPriceResponse> | Observable<ProductPriceResponse> | ProductPriceResponse;

  deleteProductPrice(
    request: DeleteProductPriceRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<Empty> | Observable<Empty> | Empty;

  getProductsPrices(
    request: GetProductsPricesRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ProductsPricesResponse> | Observable<ProductsPricesResponse> | ProductsPricesResponse;

  getCurrentPricesProducts(
    request: GetProductsPricesRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ProductsPricesResponse> | Observable<ProductsPricesResponse> | ProductsPricesResponse;
}

export function PricesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'addProductPrice',
      'updateProductPrice',
      'deleteProductPrice',
      'getProductsPrices',
      'getCurrentPricesProducts',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('PricesService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('PricesService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRICES_SERVICE_NAME = 'PricesService';
