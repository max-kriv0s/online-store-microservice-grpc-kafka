// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               unknown
// source: auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export interface Empty {
}

export interface UserResponse {
  id: string;
  username: string;
  email: string;
  createdAt: string;
  updatedAt: string;
  role: string;
}

/** Register */
export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
}

/** Login */
export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

export interface UpdateRefreshTokenRequest {
  userId: string;
}

export interface UpdateRefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateAccessTokenResponse {
  userId: string;
  roles: string[];
}

export interface ValidateRefreshTokenResponse {
  userId: string;
  roles: string[];
}

export interface LogoutRequest {
  userId: string;
}

export interface AuthServiceClient {
  register(request: RegisterRequest, metadata: Metadata, ...rest: any): Observable<UserResponse>;

  login(request: LoginRequest, metadata: Metadata, ...rest: any): Observable<LoginResponse>;

  updateRefreshToken(
    request: UpdateRefreshTokenRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<UpdateRefreshTokenResponse>;

  logout(request: LogoutRequest, metadata: Metadata, ...rest: any): Observable<Empty>;

  validate(request: ValidateTokenRequest, metadata: Metadata, ...rest: any): Observable<ValidateAccessTokenResponse>;

  validateRefreshToken(
    request: ValidateTokenRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<ValidateRefreshTokenResponse>;
}

export interface AuthServiceController {
  register(
    request: RegisterRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  login(
    request: LoginRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  updateRefreshToken(
    request: UpdateRefreshTokenRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<UpdateRefreshTokenResponse> | Observable<UpdateRefreshTokenResponse> | UpdateRefreshTokenResponse;

  logout(request: LogoutRequest, metadata: Metadata, ...rest: any): Promise<Empty> | Observable<Empty> | Empty;

  validate(
    request: ValidateTokenRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ValidateAccessTokenResponse> | Observable<ValidateAccessTokenResponse> | ValidateAccessTokenResponse;

  validateRefreshToken(
    request: ValidateTokenRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ValidateRefreshTokenResponse> | Observable<ValidateRefreshTokenResponse> | ValidateRefreshTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "updateRefreshToken",
      "logout",
      "validate",
      "validateRefreshToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
